import nodemailer from 'nodemailer';
import { google } from 'googleapis';
import { getConfig } from '../config.js';
import { ChangedBookings } from '../persistence/persistence.js';
import { DBDatesAvailabilities } from '../types.js';
const OAuth2 = google.auth.OAuth2;

export class Emailer {
  public oauth2Client = new OAuth2(
    getConfig().auth.clientId,
    getConfig().auth.clientSecret,
    'https://developers.google.com/oauthplayground', // Redirect URL
  );

  public constructor() {}

  public async sendMail(
    datesInterested: string[],
    newAvailabilities: ChangedBookings,
    allAvailabilities: DBDatesAvailabilities,
  ): Promise<void> {
    this.oauth2Client.setCredentials({
      refresh_token: getConfig().auth.refreshToken,
    });
    const accessToken = this.oauth2Client.getAccessToken();

    const smtpTransport = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        type: 'OAuth2',
        user: getConfig().auth.fromEmail,
        clientId: getConfig().auth.clientId,
        clientSecret: getConfig().auth.clientSecret,
        refreshToken: getConfig().auth.refreshToken,
        accessToken: accessToken,
      },
      tls: {
        rejectUnauthorized: false,
      },
    });

    const mailOptions = {
      from: `Sensea Scanner <${getConfig().auth.fromEmail}>`,
      to: getConfig().notification.toEmail,
      subject: 'Sensea Scanner Report',
      generateTextFromHTML: true,
      html: this.generateEmailBody(
        datesInterested,
        newAvailabilities,
        allAvailabilities,
      ),
    };

    console.log('\nSending email with updates');
    smtpTransport.sendMail(mailOptions, (error, response) => {
      console.log(`Email sent ${error ? 'unsuccessfully' : 'successfully'}`);
      error ? console.log(error) : console.log(response);
      smtpTransport.close();
    });
  }

  private countAvailabilities(
    datesAvailabilities: DBDatesAvailabilities,
  ): number {
    const datesAvailabilitiesEntries = Object.entries(datesAvailabilities);
    return datesAvailabilitiesEntries.reduce(
      (acc, [_, dateAvailabilities]) =>
        acc + Object.keys(dateAvailabilities).length,
      0,
    );
  }

  private formatAvailabilityList(
    datesAvailabilites: DBDatesAvailabilities,
  ): string {
    const datesAvailabilitesEntries = Object.entries(datesAvailabilites);

    return `<ul>
    ${datesAvailabilitesEntries
      .map(
        ([date, timeslot]) =>
          `<li> ${date} 
        <ul>
        ${Object.entries(timeslot)
          .map(
            ([dateTime, { slotsAvailable }]) =>
              `<li>${new Date(dateTime).toLocaleTimeString('en-US', {
                hour12: true,
                hour: 'numeric',
                minute: '2-digit',
                second: '2-digit',
              })}: ${slotsAvailable}</li>`,
          )
          .join('')}
        </ul>
        </li>`,
      )
      .join('')}
    </ul>`;
  }

  private generateEmailBody(
    datesInterested: string[],
    newAvailabilities: ChangedBookings,
    allAvailabilities: DBDatesAvailabilities,
  ): string {
    const { newBookings, newCancellations } = newAvailabilities;

    const totalNewBookings = this.countAvailabilities(newBookings);
    const totalCancellations = this.countAvailabilities(newCancellations);

    return `<h3>Update - New Cancellations (${totalCancellations}) / New Bookings (${totalNewBookings})</h3>
    <p>
      A new report has been generated by Sensea Scanner. Please see changes in availabilities as listed below. <a href="https://sensea.as.me/schedule.php">Click here</a> to make a booking.
    </p>
    <p>
      Your Sensea Scanner is monitoring the following dates: ${datesInterested.join(
        ', ',
      )}
    </p>
    <p>
      <h3>New cancellations:</h3>
      ${this.formatAvailabilityList(newCancellations)} 
    </p>
    <p>
      <h3>New bookings:</h3> 
      ${this.formatAvailabilityList(newBookings)}
    </p>
    <p>
      <h3>All availabilities for dates interested in:</h3>
      ${this.formatAvailabilityList(allAvailabilities)}
    </p>
    `;
  }
}
